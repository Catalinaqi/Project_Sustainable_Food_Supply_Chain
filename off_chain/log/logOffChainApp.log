2025-05-12 13:57:01,353 - app_logger - INFO - [log_load_setting.py:69] - BackEnd: INITIAL LOADING OF GLOBAL - LOGGER
2025-05-12 13:57:01,353 - app_logger - INFO - [log_load_setting.py:70] - BackEnd: Logger initialized successfully (File logging: enabled)
2025-05-12 13:57:03,717 - app_logger - INFO - [database.py:17] - BackEnd: get_connection: Name database is: sfs_chain_database.db
2025-05-12 13:57:03,718 - app_logger - INFO - [database.py:18] - BackEnd: get_connection: Path for the database is: C:\Users\fabio\Documents\GitHub\Project_Sustainable_Food_Supply_Chain\off_chain\database\sfs_chain_database.db
2025-05-12 13:57:03,722 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Richiesta with params: ()
2025-05-12 13:57:03,728 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Magazzino with params: ()
2025-05-12 13:57:03,728 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Azioni_compensative with params: ()
2025-05-12 13:57:03,729 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Certificato with params: ()
2025-05-12 13:57:03,730 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Operazione with params: ()
2025-05-12 13:57:03,731 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Prodotto with params: ()
2025-05-12 13:57:03,731 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Azienda with params: ()
2025-05-12 13:57:03,732 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Soglie with params: ()
2025-05-12 13:57:03,732 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS Credenziali with params: ()
2025-05-12 13:57:03,732 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: DROP TABLE IF EXISTS ComposizioneLotto with params: ()
2025-05-12 13:57:03,733 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Credenziali (
                Id_credenziali INTEGER PRIMARY KEY AUTOINCREMENT,
                Username TEXT UNIQUE NOT NULL,
                Password TEXT NOT NULL                
            )
             with params: ()
2025-05-12 13:57:03,733 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Soglie (
                Operazione TEXT NOT NULL,
                Prodotto INTEGER NOT NULL,
                Soglia_Massima INTEGER NOT NULL,
                firma TEXT NOT NULL,
                PRIMARY KEY (Operazione, Prodotto)
            )
             with params: ()
2025-05-12 13:57:03,734 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Azienda (
                Id_azienda INTEGER PRIMARY KEY AUTOINCREMENT,
                Id_credenziali INTEGER NOT NULL,
                Tipo TEXT CHECK(Tipo IN ('Agricola', 'Trasportatore', 'Trasformatore', 'Rivenditore', 'Certificatore')),
                Nome TEXT NOT NULL,
                Indirizzo TEXT NOT NULL,
                Co2_emessa REAL NOT NULL DEFAULT 0,
                Co2_compensata REAL NOT NULL DEFAULT 0,
                Token INTEGER NOT NULL DEFAULT 100,
                CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (Id_credenziali) REFERENCES Credenziali(Id_credenziali) ON DELETE CASCADE
            )
             with params: ()
2025-05-12 13:57:03,734 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Prodotto (
                Id_prodotto INTEGER PRIMARY KEY AUTOINCREMENT,
                Nome TEXT NOT NULL,
                Stato INTEGER,
                Data_di_inserimento TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
             with params: ()
2025-05-12 13:57:03,735 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Operazione (
                Id_operazione INTEGER PRIMARY KEY AUTOINCREMENT,
                Id_azienda INTEGER NOT NULL,
                Id_prodotto INTEGER NOT NULL,
                Id_lotto INTEGER UNIQUE NOT NULL,
                Data_operazione TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                Consumo_CO2 REAL NOT NULL,
                quantita REAL NOT NULL CHECK(quantita > 0),
                Tipo TEXT CHECK(tipo IN ('produzione', 'trasporto', 'trasformazione', 'vendita')) NOT NULL,
                FOREIGN KEY (Id_azienda) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE,
                FOREIGN KEY (Id_prodotto) REFERENCES Prodotto(Id_prodotto) ON DELETE CASCADE
            )
             with params: ()
2025-05-12 13:57:03,736 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE ComposizioneLotto (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                id_lotto_output INTEGER NOT NULL,
                id_lotto_input INTEGER NOT NULL,
                quantità_utilizzata REAL NOT NULL CHECK(quantità_utilizzata > 0),
                FOREIGN KEY (id_lotto_input) REFERENCES Operazione(Id_lotto)
            )
             with params: ()
2025-05-12 13:57:03,736 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Certificato (
                Id_certificato INTEGER PRIMARY KEY AUTOINCREMENT,
                Id_lotto INTEGER NOT NULL,
                Descrizione TEXT,
                Id_azienda_certificatore INTEGER NOT NULL,
                Data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (Id_azienda_certificatore) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE
            )
             with params: ()
2025-05-12 13:57:03,740 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Azioni_compensative (
                Id_azione INTEGER PRIMARY KEY AUTOINCREMENT,
                Data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                Id_azienda INTEGER NOT NULL,
                Co2_compensata REAL NOT NULL,
                Nome_azione TEXT NOT NULL,
                FOREIGN KEY (Id_azienda) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE
            )
             with params: ()
2025-05-12 13:57:03,741 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE Magazzino (
                id_azienda TEXT NOT NULL,
                id_lotto TEXT NOT NULL,
                quantita REAL NOT NULL CHECK(quantita >= 0),
                PRIMARY KEY (id_azienda, id_lotto),
                FOREIGN KEY (id_azienda) REFERENCES Azienda(Id_azienda),
                FOREIGN KEY (id_lotto) REFERENCES Operazione(Id_lotto)
)
             with params: ()
2025-05-12 13:57:03,742 - app_logger - INFO - [database.py:100] - BackEnd: execute_transaction: Info executing query: 
            CREATE TABLE  Richiesta (
                Id_richiesta INTEGER PRIMARY KEY AUTOINCREMENT,
                Id_richiedente INTEGER NOT NULL,
                Id_ricevente INTEGER NOT NULL,
                Id_trasportatore INTEGER NOT NULL,
                Id_prodotto INTEGER NOT NULL,
                Quantita REAL NOT NULL,
                Stato_ricevente TEXT CHECK(Stato_ricevente IN ('In attesa', 'Accettata', 'Rifiutata')),
                Stato_trasportatore TEXT CHECK(Stato_trasportatore IN ('In attesa', 'Accettata', 'Rifiutata')),
                Data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (Id_richiedente) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE
                FOREIGN KEY (Id_ricevente) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE
                FOREIGN KEY (Id_trasportatore) REFERENCES Azienda(Id_azienda) ON DELETE CASCADE
            )
             with params: ()
2025-05-12 13:57:03,750 - app_logger - INFO - [db_migrations.py:148] - BackEnd: run_migrations: Migrations completed successfully.
2025-05-12 13:57:04,268 - app_logger - INFO - [db_migrations.py:392] - Seed dei dati iniziali completato.
2025-05-12 13:57:04,268 - app_logger - INFO - [db_migrations.py:159] - BackEnd: run_migrations: Seed dei dati iniziali completato.
2025-05-12 13:57:04,269 - app_logger - INFO - [sfs_off_chain_app.py:67] - Blockchain: Starting Docker Desktop and initializing environment...
2025-05-12 13:57:04,347 - app_logger - INFO - [sfs_off_chain_app.py:116] - Frontend: Starting the PyQt application...
2025-05-12 13:57:04,349 - app_logger - INFO - [sfs_off_chain_app.py:119] - Start session on 2025/05/12/13-57
2025-05-12 13:57:05,237 - app_logger - INFO - [sfs_off_chain_app.py:34] - Docker Desktop is not running, attempting to start it...
2025-05-12 13:57:17,319 - app_logger - INFO - [sfs_off_chain_app.py:50] - Docker Desktop started successfully
2025-05-12 13:57:44,796 - app_logger - ERROR - [sfs_off_chain_app.py:94] - Blockchain: Error initializing blockchain environment: Failed to connect to Ganache
2025-05-12 13:57:45,807 - app_logger - INFO - [credential_repository_impl.py:28] - BackEnd: Successfully initializing the instance for CredentialRepositoryImpl.
2025-05-12 13:57:45,809 - app_logger - INFO - [credential_controller.py:16] - BackEnd: Successful initialization of 'class instances' for repository implements
